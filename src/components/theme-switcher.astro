---
import { Icon } from "astro-icon/components";
---

<!--
  negative margin is sum of button width (6) and gap size of flex parent (6)
  TODO don't hardcode these values
-->
<button
  id="theme-switcher"
  type="button"
  class="-ml-12 origin-[right_center] scale-0 transition-all duration-500"
>
  <span id="icon-theme-light">
    <Icon name="mdi:white-balance-sunny" class="size-6" />
    <span class="sr-only">Use light theme</span>
  </span>
  <span id="icon-theme-dark" class="hidden">
    <Icon name="mdi:weather-night" class="size-6" />
    <span class="sr-only">Use dark theme</span>
  </span>
</button>

<script>
  import invariant from "tiny-invariant";

  const themes = ["light", "dark"];
  const button = document.querySelector("#theme-switcher");
  invariant(button, "button should not be null");

  const getThemeCurrent = () => document.documentElement.dataset.theme;
  const getThemeNext = () => {
    const themeCurrent = getThemeCurrent();
    invariant(themeCurrent, "themeCurrent should not be undefined");
    const indexThemeCurrent = themes.indexOf(themeCurrent);
    return themes[(indexThemeCurrent + 1) % themes.length];
  };

  const updateIcon = () => {
    const themeCurrent = getThemeCurrent();
    document
      .querySelector(`#icon-theme-${themeCurrent}`)
      ?.classList.add("hidden");
    const themeNext = getThemeNext();
    document
      .querySelector(`#icon-theme-${themeNext}`)
      ?.classList.remove("hidden");
  };

  const staticUpdate = ()=>{
      //change theme static
      const bod = document.body.classList;
      const con = document.querySelector("#consultingImg").classList;
      const ser = document.querySelector("#serviceImg").classList;
      const str = document.querySelector('#starfield').classList;
      const blendImages = [con,ser];

      if (document.documentElement.dataset.theme === "dark"){
          bod.toggle("bg-dark",true);
          bod.toggle("bg-light", false);
          blendImages.forEach(img =>{
            img.toggle("md:mix-blend-lighten",true);
            img.toggle("md:mix-blend-darken",false);
          });
          str.toggle("mix-blend-lighten",true);
          str.toggle("mix-blend-darken",false);
          }
      if (document.documentElement.dataset.theme === "light"){
          bod.toggle("bg-dark", false);
          bod.toggle("bg-light", true);
          blendImages.forEach(img => {
            img.toggle("md:mix-blend-darken", true);
            img.toggle("md:mix-blend-lighten", false);
          });
          str.toggle("mix-blend-darken", true);
          str.toggle("mix-blend-lighten", false);
          }
      }

  button.addEventListener("click", () => {
    const themeNext = getThemeNext();
    document.documentElement.dataset.theme = themeNext;
    localStorage.setItem("theme", themeNext);
    updateIcon();
    staticUpdate();
  });

  updateIcon();
</script>

<style>
  :global(.fixed-header) #theme-switcher {
    @apply ml-0 scale-100;
  }
</style>

